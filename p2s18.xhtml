<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-r1 0.10.0 Documentation: 2.18. Lighting</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://mvn.io7m.com/io7m-r1/">io7m-r1</a> 0.10.0
  </div>
</div><div class="st200_navbar st200_navbar_top"><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_title_cell">2.17. Environment Mapping</td><td class="st200_navbar_up_title_cell">2. Design and Implementation</td><td class="st200_navbar_next_title_cell">2.19. Directional Lighting</td></tr><tr><td class="st200_navbar_prev_file_cell"><a href="p2s17.xhtml#st200_p2s17">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p2s19.xhtml#st200_p2s19">Next</a></td></tr></table><hr class="st200_hr"/></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s18" href="#st200_p2s18">2.18</a></div><div class="st200_section_title">Lighting</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s18.xhtml#st200_p2s18ss1">2.18.1. Overview</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s18.xhtml#st200_p2s18ss2">2.18.2. Diffuse/Specular Terms</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s18.xhtml#st200_p2s18ss3">2.18.3. Diffuse-Only Lights</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s18.xhtml#st200_p2s18ss4">2.18.4. Attenuation</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s18ss1" href="#st200_p2s18ss1">2.18.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss1pg1" href="#st200_p2s18ss1pg1">1</a></div><div class="st200_paragraph">
      The following sections of documentation attempt to describe the theory and
      implementation of <span class="st200_term term">lighting</span> in the
      <span class="st200_term package">io7m-r1</span> package. All lighting
      in the package is <span class="st200_term term">dynamic</span> - there is no support
      for precomputed lighting and all contributions from lights are recalculated every
      time a scene is rendered. Lighting is configured by adding instances of
      <a class="st200_link_external" href="apidocs/com/io7m/r1/kernel/types/KLightType.html">KLightType</a>
      to a scene.
    </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s18ss2" href="#st200_p2s18ss2">2.18.2</a></div><div class="st200_subsection_title">Diffuse/Specular Terms</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss2pg1" href="#st200_p2s18ss2pg1">1</a></div><div class="st200_paragraph">
      The light applied to a surface by a given light is divided
      into <span class="st200_term term">diffuse</span> and
      <span class="st200_term term">specular</span> terms
      <span class="st200_footnote_reference"><a id="st200_fn_31_ref" href="#st200_fn_31">[31]</a></span>. The actual light applied to a surface is dependent upon
      the properties of the surface. Conceptually, the diffuse and specular 
      terms are multiplied by the final color of the surface and summed. In
      practice, the materials applied to surfaces have control over how
      light is actually applied to the surface. For example, materials may
      include a 
      <a class="st200_link" href="p2s6.xhtml#st200_p2s6ss5">specular map</a>
      which is used to manipulate the specular term as it is applied to the surface.
      Additionally, if a light supports <span class="st200_term term">attenuation</span>,
      then the diffuse and specular terms are scaled by the attenuation factor
      prior to being applied.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss2pg2" href="#st200_p2s18ss2pg2">2</a></div><div class="st200_paragraph">
      The <span class="st200_term term">diffuse</span> term is modelled by
      <a class="st200_link_external" href="http://en.wikipedia.org/wiki/Lambertian_reflectance">Lambertian reflectance</a>.
      Specifically, the amount of diffuse light reflected from a surface
      is given by <span class="st200_term function">diffuse</span>
      [<a class="st200_link_external" href="haskell/LightDiffuse.hs">LightDiffuse.hs</a>]:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s18ss2fo1" href="#st200_p2s18ss2fo1">2.18.2.1. Diffuse term</a></div><pre class="st200_verbatim">module LightDiffuse where

import qualified Color3
import qualified Direction
import qualified Normal
import qualified Spaces
import qualified Vector3f

diffuse ::  Direction.T Spaces.Eye -&gt; Normal.T -&gt; Color3.T -&gt; Float -&gt; Vector3f.T
diffuse stl n light_color light_intensity =
  let 
    factor       = max 0.0 (Vector3f.dot3 stl n)
    light_scaled = Vector3f.scale light_color light_intensity
  in 
    Vector3f.scale light_scaled factor</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss2pg3" href="#st200_p2s18ss2pg3">3</a></div><div class="st200_paragraph">
      Where <span class="st200_term variable">stl</span> is a unit length direction vector
      from the surface to the light source, <span class="st200_term variable">n</span> is the surface
      normal vector, <span class="st200_term variable">light_color</span> is the 
      light color, and <span class="st200_term variable">light_intensity</span> 
      is the light intensity. Informally, the algorithm determines how much diffuse light
      should be reflected from a surface based on how directly that surface
      points towards the light. When <span class="st200_term expression">stl == n</span>,
      <span class="st200_term expression">Vector3f.dot3 stl n == 1.0</span>, and
      therefore the light is reflected exactly as received. When 
      <span class="st200_term expression">stl</span> is perpendicular to 
      <span class="st200_term expression">n</span> (such that 
      <span class="st200_term expression">Vector3f.dot3 stl n == 0.0</span>), no
      light is reflected at all. If the two directions are greater than 
      <span class="st200_term constant">90Â°</span> perpendicular, the dot product 
      is negative, but the algorithm clamps negative values to 
      <span class="st200_term constant">0.0</span> so the effect is the same.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s18ss2fo2" href="#st200_p2s18ss2fo2">2.18.2.2. Diffuse light</a></div><img class="st200_image" alt="Diffuse light" src="images/directional_diffuse.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss2pg4" href="#st200_p2s18ss2pg4">4</a></div><div class="st200_paragraph">
      The specular term is modelled by 
      <a class="st200_link_external" href="http://en.wikipedia.org/wiki/Phong_reflection_model">Phong reflection</a>
      <span class="st200_footnote_reference"><a id="st200_fn_32_ref" href="#st200_fn_32">[32]</a></span>.
      Specifically, the amount of specular light reflected from a surface is given by 
      <span class="st200_term function">specular</span>
      [<a class="st200_link_external" href="haskell/LightSpecular.hs">LightSpecular.hs</a>]:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s18ss2fo3" href="#st200_p2s18ss2fo3">2.18.2.3. Specular Term</a></div><pre class="st200_verbatim">module LightSpecular where

import qualified Color3
import qualified Direction
import qualified Normal
import qualified Reflection
import qualified Spaces
import qualified Specular
import qualified Vector3f

specular :: Direction.T Spaces.Eye -&gt; Direction.T Spaces.Eye -&gt; Normal.T -&gt; Color3.T -&gt; Float -&gt; Specular.T -&gt; Vector3f.T
specular stl view n light_color light_intensity (Specular.S surface_spec surface_exponent) =
  let 
    reflection   = Reflection.reflection view n
    factor       = (max 0.0 (Vector3f.dot3 reflection stl)) ** surface_exponent
    light_raw    = Vector3f.scale light_color light_intensity
    light_scaled = Vector3f.scale light_raw factor
  in 
    Vector3f.mult3 light_scaled surface_spec
</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss2pg5" href="#st200_p2s18ss2pg5">5</a></div><div class="st200_paragraph">
      Where <span class="st200_term variable">stl</span> is a unit length direction vector
      from the surface to the light source, 
      <span class="st200_term variable">view</span> is a unit length 
      direction vector from the observer to the surface, 
      <span class="st200_term variable">n</span> is the surface
      normal vector, <span class="st200_term variable">light_color</span> is the 
      light color, <span class="st200_term variable">light_intensity</span> 
      is the light intensity, <span class="st200_term variable">surface_exponent</span> is the
      <span class="st200_term term">specular exponent</span> defined by the surface,
      and <span class="st200_term variable">surface_spec</span> is the surface
      specularity factor.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss2pg6" href="#st200_p2s18ss2pg6">6</a></div><div class="st200_paragraph">
      The specular exponent is a value, ordinarily in the range 
      <span class="st200_term expression">[0, 255]</span>, that
      controls how sharp the <span class="st200_term term">specular highlights</span>
      appear on the surface. The exponent is a property of the surface, as opposed
      to being a property of the light. Low specular exponents result in soft and widely
      dispersed specular highlights (giving the appearance of a rough surface), while 
      high specular exponents result in hard and focused highlights (giving the appearance of a polished 
      surface). As an example, three models lit with 
      progressively lower specular exponents from left to right (<span class="st200_term constant">128</span>,
      <span class="st200_term constant">32</span>, and <span class="st200_term constant">8</span>,
      respectively):
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s18ss2fo4" href="#st200_p2s18ss2fo4">2.18.2.4. Specular exponents</a></div><img class="st200_image" alt="Specular exponents" src="images/directional_specular_exponents.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s18ss3" href="#st200_p2s18ss3">2.18.3</a></div><div class="st200_subsection_title">Diffuse-Only Lights</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss3pg1" href="#st200_p2s18ss3pg1">1</a></div><div class="st200_paragraph">
      Some lights have <span class="st200_term term">diffuse-only</span> variants.
      Little explanation is required: The 
      <a class="st200_link" href="p2s18.xhtml#st200_p2s18ss2pg4">specular</a>
      term is simply not calculated and only the <span class="st200_term term">diffuse</span>
      term is used.
    </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s18ss4" href="#st200_p2s18ss4">2.18.4</a></div><div class="st200_subsection_title">Attenuation</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss4pg1" href="#st200_p2s18ss4pg1">1</a></div><div class="st200_paragraph">
      <span class="st200_term term">Attenuation</span> is the property of the influence
      of a given light on a surface in inverse proportion to the distance from the
      light to the surface. In other words, for lights that support attenuation,
      the further a surface is from a light source, the less that surface will
      appear to be lit by the light. For light types that support attenuation,
      an <span class="st200_term term">attenuation factor</span> is calculated based
      on a given <span class="st200_term variable">inverse_maximum_range</span> 
      (where the <span class="st200_term variable">maximum_range</span> is a
      light-type specific positive value that represents the maximum possible
      range of influence for the light), a configurable 
      <span class="st200_term term">inverse falloff</span> value, and the current
      <span class="st200_term variable">distance</span> between the surface being 
      lit and the light source. The  attenuation factor is a value in the range 
      <span class="st200_term expression">[0.0, 1.0]</span>, with
      <span class="st200_term expression">1.0</span> meaning "no attenuation" and
      <span class="st200_term expression">0.0</span> meaning "maximum attenuation".
      The resulting attenuation factor is multiplied by the raw unattenuated
      light values produced for the light in order to produce the illusion of
      distance attenuation. Specifically:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s18ss4fo1" href="#st200_p2s18ss4fo1">2.18.4.1. Attenuation</a></div><pre class="st200_verbatim">module Attenuation where

attenuation_from_inverses :: Float -&gt; Float -&gt; Float -&gt; Float
attenuation_from_inverses inverse_maximum_range inverse_falloff distance =
  max 0.0 (1.0 - (distance * inverse_maximum_range) ** inverse_falloff)

attenuation :: Float -&gt; Float -&gt; Float -&gt; Float
attenuation maximum_range falloff distance =
  attenuation_from_inverses (1.0 / maximum_range) (1.0 / falloff) distance
</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss4pg2" href="#st200_p2s18ss4pg2">2</a></div><div class="st200_paragraph">
      Given the above definitions, a number of observations can be made.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss4pg3" href="#st200_p2s18ss4pg3">3</a></div><div class="st200_paragraph">
      If <span class="st200_term expression">falloff == 1</span>, then the
      attenuation is linear over distance <span class="st200_footnote_reference"><a id="st200_fn_33_ref" href="#st200_fn_33">[33]</a></span>:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s18ss4fo2" href="#st200_p2s18ss4fo2">2.18.4.2. Linear attenuation</a></div><img class="st200_image" alt="Linear attenuation" src="images/attenuation_linear.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss4pg4" href="#st200_p2s18ss4pg4">4</a></div><div class="st200_paragraph">
      If <span class="st200_term expression">maximum_range == 0</span>, then the
      inverse range is undefined, and therefore the results of lighting are 
      undefined. The <span class="st200_term package">io7m-r1</span> package
      handles this case by raising an exception when the light is created.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss4pg5" href="#st200_p2s18ss4pg5">5</a></div><div class="st200_paragraph">
      If <span class="st200_term expression">falloff == 0</span>, then the
      inverse falloff is undefined, and therefore the results of lighting are 
      undefined. The <span class="st200_term package">io7m-r1</span> package
      handles this case by raising an exception when the light is created.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss4pg6" href="#st200_p2s18ss4pg6">6</a></div><div class="st200_paragraph">
      As <span class="st200_term expression">falloff</span> decreases towards
      <span class="st200_term expression">0.0</span>, then the attenuation curve 
      remains at <span class="st200_term expression">1.0</span> for increasingly
      higher distance values before falling sharply to 
      <span class="st200_term expression">0.0</span>:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s18ss4fo3" href="#st200_p2s18ss4fo3">2.18.4.3. Low falloff attenuation</a></div><img class="st200_image" alt="Low falloff attenuation" src="images/attenuation_low_falloff.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s18ss4pg7" href="#st200_p2s18ss4pg7">7</a></div><div class="st200_paragraph">
      As <span class="st200_term expression">falloff</span> increases away from
      <span class="st200_term expression">0.0</span>, then the attenuation curve 
      decreases more for lower distance values:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s18ss4fo4" href="#st200_p2s18ss4fo4">2.18.4.4. High falloff attenuation</a></div><img class="st200_image" alt="High falloff attenuation" src="images/attenuation_high_falloff.png"/></div></div></div><div class="st200_footnotes"><hr/><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_31" href="#st200_fn_31_ref">31</a>]</div><div class="st200_footnote_body">
        The <span class="st200_term package">io7m-r1</span> package
        does not use ambient terms.
      </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_32" href="#st200_fn_32_ref">32</a>]</div><div class="st200_footnote_body">
        Note: Specifically <span class="st200_term term">Phong reflection</span> 
        and not the more commonly used 
        <a class="st200_link_external" href="http://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model">Blinn-Phong reflection</a>.
      </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_33" href="#st200_fn_33_ref">33</a>]</div><div class="st200_footnote_body">
        The attenuation function development is available for experimentation
        in the included <a class="st200_link_external" href="http://geogebra.org">GeoGebra</a>
        file [<a class="st200_link_external" href="attenuation.ggb">attenuation.ggb</a>].
      </div></div></div><div class="st200_navbar st200_navbar_bottom"><hr class="st200_hr"/><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_file_cell"><a href="p2s17.xhtml#st200_p2s17">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p2s19.xhtml#st200_p2s19">Next</a></td></tr><tr><td class="st200_navbar_prev_title_cell">2.17. Environment Mapping</td><td class="st200_navbar_up_title_cell">2. Design and Implementation</td><td class="st200_navbar_next_title_cell">2.19. Directional Lighting</td></tr></table></div></div></body></html>
