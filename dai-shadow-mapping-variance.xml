<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright Â© 2014 <code@io7m.com> http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:section 
  xml:id="r1.dai.shadow-mapping-variance"
  xmlns:s="http://schemas.io7m.com/structural/2.1.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:section-title>Shadow mapping - Variance</s:section-title>
  <s:section-contents/>

  <s:subsection xml:id="r1.dai.shadow-mapping-variance.overview">
    <s:subsection-title>Overview</s:subsection-title>
    <s:paragraph>
      <s:term s:type="term">Variance shadow mapping</s:term> is a technique
      that can give attractive soft-edged shadows. Using the same
      view and projection matrices used to apply
      <s:link s:target="r1.dai.lighting-projective">projective lights</s:link>,
      a <s:term s:type="term">depth-variance</s:term> image of the current
      scene is rendered, and those stored depth distribution values
      are used to determine the probability that a given
      point in the scene is in shadow with respect to the current light.
    </s:paragraph>
    <s:paragraph>
      The algorithm implemented in the <s:term s:type="package">io7m-r1</s:term> 
      package is described in
      <s:link-external s:target="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch08.html">GPU Gems 3</s:link-external>,
      which is a set of improvements to the original variance shadow mapping
      algorithm by William Donnelly and Andrew Lauritzen. The
      <s:term s:type="package">io7m-r1</s:term> package implements
      all of the improvements to the algorithm except
      <s:term s:type="term">summed area tables</s:term>. The package also provides
      optional box blurring of shadows as described in the chapter.
    </s:paragraph>
  </s:subsection>

  <s:subsection xml:id="r1.dai.shadow-mapping-variance.algorithm">
    <s:subsection-title>Algorithm</s:subsection-title>
    <s:paragraph>
      Prior to actually <s:link s:target="r1.dai.deferred">rendering</s:link> 
      a visible set, <s:term s:type="term">shadow maps</s:term> are generated
      for all <s:term s:type="term">shadow-projecting</s:term> lights in
      the set. A <s:term s:type="term">shadow map</s:term> for variance shadow
      mapping, for a light <s:term s:type="expression">k</s:term>, is a two-component 
      red/green image of all of the 
      <s:link s:target="r1.dai.visible-sets.shadow-geometry">shadow casters</s:link>
      associated with <s:term s:type="expression">k</s:term> in the visible set.
      The image is produced by rendering the instances from the point of view of
      <s:term s:type="expression">k</s:term>. The red
      channel of each pixel in the image represents the 
      <s:link s:target="r1.dai.log_depth">logarithmic depth</s:link>
      of the closest surface at that pixel, and the green channel represents
      the depth squared (literally <s:term s:type="expression">depth * depth</s:term>). 
      For example:
    </s:paragraph>
    <s:formal-item s:kind="diagram">
      <s:formal-item-title>Depth-variance image</s:formal-item-title>
      <s:image s:source="images/depth_variance.png">Depth-variance image</s:image>
    </s:formal-item>
    <s:paragraph>
      Then, when actually applying lighting during rendering of the
      scene, a given <s:link s:target="r1.dai.coords.eye-space">eye space</s:link>
      position <s:term s:type="expression">p</s:term> is transformed to
      <s:link s:target="r1.dai.lighting-projective.algorithm">light-clip space</s:link>
      and then mapped to the range
      <s:term s:type="expression">[(0, 0, 0), (1, 1, 1)]</s:term> in order
      to sample the <s:term s:type="term">depth</s:term> and
      <s:term s:type="term">depth squared</s:term> values
      <s:term s:type="expression">(d, ds)</s:term>
      from the shadow map (as with sampling from a projected texture
      with projective lighting). 
    </s:paragraph>
    <s:paragraph>
      As stated previously, the intent of variance
      shadow mapping is to essentially calculate the 
      <s:term s:type="term">probability</s:term> that a given point is in shadow,
      rather than the binary <s:term s:type="term">is/is not</s:term> of
      <s:link s:target="r1.dai.shadow-mapping-basic">basic shadow mapping</s:link>.
      A <s:term s:type="term">one-tailed</s:term> variant of
      <s:link-external s:target="https://en.wikipedia.org/wiki/Chebyshev%27s_inequality">Chebyshev's inequality</s:link-external>
      is used to calculate the upper bound <s:term s:type="expression">u</s:term>
      on the probability that, given
      <s:term s:type="expression">(d, ds)</s:term>, a given point with depth
      <s:term s:type="expression">t</s:term> is in shadow:
    </s:paragraph>
    <s:formal-item s:kind="equation">
      <s:formal-item-title>Chebyshev 0</s:formal-item-title>
      <s:verbatim><xi:include href="haskell/ShadowVarianceChebyshev0.hs" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      One of the improvements suggested to the original variance shadow
      algorithm is to clamp the minimum variance to some small value
      (the <s:term s:type="package">io7m-r1</s:term> package uses <s:term s:type="constant">0.00002</s:term>
      by default, but this is configurable on a per-shadow basis). The
      equation above becomes:
    </s:paragraph>
    <s:formal-item s:kind="equation">
      <s:formal-item-title>Chebyshev 1</s:formal-item-title>
      <s:verbatim><xi:include href="haskell/ShadowVarianceChebyshev1.hs" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      The above is sufficient to give shadows that are roughly equivalent
      in visual quality to <s:link s:target="r1.dai.shadow-mapping-basic">basic shadow mapping</s:link>
      with the added benefit of being generally better behaved and with
      far fewer artifacts. However, the algorithm can suffer from
      <s:term s:type="term">light bleeding</s:term>, where the penumbrae
      of overlapping shadows can be unexpectedly bright despite the fact
      that the entire area should be in shadow. One of the suggested
      improvements to reduce light bleeding is to modify the upper bound
      <s:term s:type="expression">u</s:term> such that all values below
      a configurable threshold are mapped to zero, and values above the
      threshold are rescaled to map them to the range
      <s:term s:type="expression">[0, 1]</s:term>. The original article
      suggests a linear step function applied to 
      <s:term s:type="expression">u</s:term>:
    </s:paragraph>
    <s:formal-item s:kind="equation">
      <s:formal-item-title>Chebyshev 2</s:formal-item-title>
      <s:verbatim><xi:include href="haskell/ShadowVarianceChebyshev2.hs" parse="text"/></s:verbatim>
    </s:formal-item>
    <s:paragraph>
      The amount of light bleed reduction is adjustable on a per-shadow
      basis.
    </s:paragraph>
    <s:paragraph>
      To reduce problems involving numeric inaccuracy, the
      original article suggests the use of 32-bit floating point textures
      in depth variance maps. The <s:term s:type="package">io7m-r1</s:term>
      package allows 16-bit or 32-bit textures, configurable on a per-shadow basis.
    </s:paragraph>
    <s:paragraph>
      Finally, as mentioned previously, the <s:term s:type="package">io7m-r1</s:term>
      package allows both optional box blurring and mipmap generation for shadow
      maps. Both blurring and mipmapping can reduce aliasing artifacts,
      with the former also allowing the edges of shadows to be significantly
      softened as a visual effect:
    </s:paragraph>
    <s:formal-item s:kind="diagram">
      <s:formal-item-title>Depth-variance shadows (Minimal blur)</s:formal-item-title>
      <s:image s:source="images/variance_0.png">Depth-variance shadows (Minimal blur)</s:image>
    </s:formal-item>
    <s:formal-item s:kind="diagram">
      <s:formal-item-title>Depth-variance shadows (High blur)</s:formal-item-title>
      <s:image s:source="images/variance_1.png">Depth-variance shadows (High blur)</s:image>
    </s:formal-item>
  </s:subsection>

  <s:subsection xml:id="r1.dai.shadow-mapping-variance.types">
    <s:subsection-title>Types</s:subsection-title>
    <s:paragraph>
      Variance mapped shadows are represented by the
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KShadowMappedVariance.html">KShadowMappedVariance</s:link-external>
      type, and can be associated with
      <s:link s:target="r1.dai.lighting-projective">projective lights</s:link>.
    </s:paragraph>
    <s:paragraph>
      Rendering of depth-variance images is handled by the
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/KDepthVarianceRendererType.html">KDepthVarianceRendererType</s:link-external>
      type.
    </s:paragraph>
  </s:subsection>

</s:section>
