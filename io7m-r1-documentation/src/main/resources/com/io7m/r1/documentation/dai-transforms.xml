<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright Â© 2014 <code@io7m.com> http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:section 
  xml:id="r1.dai.transforms"
  xmlns:s="http://schemas.io7m.com/structural/2.1.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:section-title>Transforms</s:section-title>
  <s:section-contents/>

  <s:subsection xml:id="r1.dai.transforms.overview">
    <s:subsection-title>Overview</s:subsection-title>
    <s:paragraph>
      The ultimate purpose of a <s:term s:type="term">transform</s:term>
      is to produce one or more matrices that can be combined with
      other matrices and then finally passed to a 
      <s:term s:type="term">shader</s:term>. The shader uses these
      matrices to transform vertices and normal vectors during the
      rendering of objects.
    </s:paragraph>
    <s:paragraph>
      A transform is effectively responsible for producing a
      <s:term s:type="term">model matrix</s:term> that transforms
      positions in 
      <s:link s:target="r1.dai.coords.object-space">object-space</s:link>
      to 
      <s:link s:target="r1.dai.coords.world-space">world-space</s:link>.
    </s:paragraph>
    <s:paragraph>
      In practical terms, a <s:term s:type="term">transform</s:term> is
      a matrix used to position, scale, and rotate 
      <s:link s:target="r1.dai.concepts.instances">instances</s:link>
      in a scene. This is achieved by multiplying the matrix with the 
      object-space positions of all vertices of the mesh that makes up the 
      instance, during rendering. The type of transforms in the 
      <s:term s:type="package">${project.parent.name}</s:term> package is the
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KTransformType.html">KTransformType</s:link-external>
      which, at the time of writing, is implemented by two specific types that
      are documented in the following sections.
    </s:paragraph>
  </s:subsection>

  <s:subsection xml:id="r1.dai.transforms.matrix4x4">
    <s:subsection-title>KTransformMatrix4x4</s:subsection-title>
    <s:paragraph>
      The
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KTransformMatrix4x4.html">KTransformMatrix4x4</s:link-external>
      type represents a model matrix directly. In other words, the programmer
      is assumed to be using some other system of producing transforms that
      directly produces a 4x4 model matrix as a result.
    </s:paragraph>
    <s:paragraph>
      This kind of transform is useful for representing transforms that
      are the result of many other concatenated transforms. As an example,
      consider a robot arm with multiple joints: The transform for the tip 
      of the arm is the sum of the rotations of all of the ancestor joints.
    </s:paragraph>
  </s:subsection>

  <s:subsection xml:id="r1.dai.transforms.ost">
    <s:subsection-title>KTransformOST</s:subsection-title>
    <s:paragraph>
      The
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KTransformOST.html">KTransformOST</s:link-external>
      type represents a transform using a 
      <s:term s:type="term">quaternion</s:term> representing an orientation,
      a vector representing scaling values on three axes, and a translation vector
      given in <s:link s:target="r1.dai.coords.world-space">world-space</s:link>.
    </s:paragraph>
    <s:paragraph>
      This representation is simple and allows for convenient positioning
      and rotation of objects in the world. Quaternions, scaling vectors, and
      translations are all easily interpolated, and are therefore convenient
      for producing simple animations. Assuming that 
      <s:term s:type="variable">mr</s:term> is a 4x4
      rotation matrix produced from the quaternion, 
      <s:term s:type="variable">ms</s:term> is a 4x4 scaling matrix produced
      from the scaling vector, and <s:term s:type="variable">mt</s:term> is a 4x4
      translation matrix produced from the translation vector, then the final
      model matrix <s:term s:type="variable">mm</s:term> is given by 
      <s:term s:type="expression">mm = mt * mr * ms</s:term>. This has the effect
      of first scaling the object along the global axes, and then rotating the
      scaled object, and then moving the scaled and rotated object to the world
      position given by the translation 
      <s:footnote>
        An intuitive way to think about transforms concatenated in this
        manner is that a transform <s:term s:type="emphasis">always occurs about the origin</s:term>.
        So, if a translation is applied first, and then a rotation is applied, the
        object will appear to orbit around the origin (because the rotation
        happens around the origin, and the translation moved it away from
        the origin first).
      </s:footnote>.
    </s:paragraph>
  </s:subsection>

</s:section>
