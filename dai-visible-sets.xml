<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright Â© 2014 <code@io7m.com> http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:section 
  xml:id="r1.dai.visible-sets"
  xmlns:s="http://schemas.io7m.com/structural/2.1.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:section-title>Visible Sets</s:section-title>
  <s:section-contents/>

  <s:subsection xml:id="r1.dai.visible-sets.overview">
    <s:subsection-title>Overview</s:subsection-title>
    <s:paragraph>
      A <s:term s:type="term">visible set</s:term> is the collection of
      <s:link s:target="r1.dai.instances">instances</s:link> and
      <s:link s:target="r1.dai.lighting">lights</s:link> that contribute
      to the scene from the perspective of a given 
      <s:term s:type="term">observer</s:term>. As stated previously
      the <s:term s:type="package">io7m-r1</s:term> package
      assumes that the programmer is using some sort of spatial data structure
      to intelligently decide what is and is not visible at any given time:
      The <s:term s:type="package">io7m-r1</s:term> package
      draws exactly what it is told to draw, and does not attempt to work out
      if a given object is visible or not.
    </s:paragraph>
  </s:subsection>

  <s:subsection xml:id="r1.dai.visible-sets.batching">
    <s:subsection-title>Batching</s:subsection-title>
    <s:paragraph>
      A <s:term s:type="term">visible set</s:term> is <s:term s:type="term">batched</s:term>
      in order that the renderer can draw the scene with as few internal state
      changes as possible. Instances and lights are submitted to a mutable
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KVisibleSetBuilderType.html">builder</s:link-external>
      which produces an immutable
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KVisibleSet.html">visible set</s:link-external>
      as a result. Opaque instances are associated with lights in
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KVisibleSetLightGroup.html">light groups</s:link-external>,
      and translucent instances are submitted with groups of
      lights in draw order. The <s:term s:type="package">io7m-r1</s:term> package
      renders translucent instances in the order that they are given to the builder.
    </s:paragraph>
    <s:paragraph>
      Because opaque instances can be drawn in any order due to depth buffering,
      the <s:term s:type="package">io7m-r1</s:term> package
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KVisibleSetOpaques.html">groups opaque instances</s:link-external>
      by material type in order to come up with a draw order that will result in the 
      fewest internal state changes during rendering. It applies this same grouping methodology 
      to produce sets of
      <s:link-external s:target="apidocs/com/io7m/r1/kernel/types/KVisibleSetShadows.html">shadow casters</s:link-external>
      for producing shadow maps for any shadow-projecting lights in the scene.
      Visible instances are batched by their <s:link s:target="r1.dai.materials.shaders">material code</s:link>,
      so if the materials differ only by, for example, their albedo color, then
      they will both have the same material code and will be in the same batch
      during rendering. The same batching logic is applied to shadow casting
      instances.
    </s:paragraph>
  </s:subsection>

  <s:subsection xml:id="r1.dai.visible-sets.shadow-geometry">
    <s:subsection-title>Shadow Geometry</s:subsection-title>
    <s:paragraph>
      Because the system requires the programmer to explicitly and separately state 
      that an opaque instance is visible in the scene, and that an opaque instance
      is casting a shadow, it becomes possible to effectively specify different 
      <s:term s:type="term">shadow geometry</s:term> for a given instance. As an example,
      a very complex and high resolution mesh may still have the silhouette of a simple
      sphere, and therefore the user can separately add the high resolution mesh to
      a scene as a visible instance, but add a low resolution version of the mesh
      as an invisible shadow-casting instance with the same
      <s:link s:target="r1.dai.transforms">transform</s:link>. As a rather extreme
      example, assuming a high resolution mesh <s:term s:type="variable">m0</s:term>
      added to the scene as both a visible instance and a shadow caster:
    </s:paragraph>
    <s:formal-item s:kind="diagram">
      <s:formal-item-title>Visible and shadow casting (High)</s:formal-item-title>
      <s:image s:source="images/shadow_geo_0.png">Visible and shadow casting (High)</s:image>
    </s:formal-item>
    <s:paragraph>
      A low resolution mesh <s:term s:type="variable">m1</s:term> added to the
      scene as both a visible instance and shadow caster:
    </s:paragraph>
    <s:formal-item s:kind="diagram">
      <s:formal-item-title>Visible and shadow casting (Low)</s:formal-item-title>
      <s:image s:source="images/shadow_geo_1.png">Visible and shadow casting (Low)</s:image>
    </s:formal-item>
    <s:paragraph>
      Now, with <s:term s:type="variable">m1</s:term> added as only a shadow
      caster, and <s:term s:type="variable">m0</s:term> added as only a visible
      instance:
    </s:paragraph>
    <s:formal-item s:kind="diagram">
      <s:formal-item-title>Visible and shadow casting (Low shadow, high visible)</s:formal-item-title>
      <s:image s:source="images/shadow_geo_2.png">Visible and shadow casting (Low shadow, high visible)</s:image>
    </s:formal-item>
    <s:paragraph>
      Using lower resolution geometry for shadow casters can lead to efficiency gains
      on systems where vertex processing is expensive.
    </s:paragraph>
  </s:subsection>

</s:section>
